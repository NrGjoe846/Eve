[
  {
    "phase": "Phase 1: Python Basics and Core Concepts",
    "topics": [
      {
        "topic": "1. Introduction to Python Programming",
        "subtopics": [
          { "subtopic": "Installing Python (Anaconda, PyCharm, or basic Python)", "questionsData": [] },
          { "subtopic": "Setting up the IDE", "questionsData": [] },
          { "subtopic": "Writing your first Python program: print(\"Hello, World!\")", "questionsData": [
{
"type": "multiple-selection",
"question": "Which of these are valid Python keywords? (Select all that apply)",
"options": [
"print",
"for",
"if"
],
"answer": ["if", "for"],
"component": "MultipleSelectionQuestion",
"hints": [
{ "id": 1, "text": "Keywords are reserved words in Python." },
{ "id": 2, "text": "One of these is a function, not a keyword." },
{ "id": 3, "text": "Think of words used in control flow like loops or conditionals." },
{ "id": 4, "text": "Check which ones you can’t use as variable names." },
{ "id": 5, "text": "Two of these control program structure." }
]
},
{
"type": "fill",
"question": "Complete this code to print your name: __________('My name is Alex')",
"answer": "print",
"component": "FillInTheBlank",
"hints": [
{ "id": 1, "text": "This is a basic Python output function." },
{ "id": 2, "text": "It’s used in the 'Hello, World!' example." },
{ "id": 3, "text": "The word is 5 letters long." },
{ "id": 4, "text": "It tells Python to display text." },
{ "id": 5, "text": "Starts with 'p' and ends with 't'." }
]
},
{
"type": "multiple-choice",
"question": "What is the output of this code: print('Hello, World!')?",
"options": [
"Error",
"Hello World",
"Hello, World!"
],
"answer": "Hello, World!",
"component": "MultipleChoiceQuestion",
"hints": [
{ "id": 1, "text": "The output matches what’s inside the quotes." },
{ "id": 2, "text": "Python’s print function displays text exactly as written." },
{ "id": 3, "text": "Check for punctuation in the output." },
{ "id": 4, "text": "There’s no syntax error in the code." },
{ "id": 5, "text": "The comma and exclamation mark are included." }
]
},
{
"type": "true-false",
"question": "Python requires a compiler to run its code.",
"answer": "False",
"component": "TrueFalseQuestion",
"hints": [
{ "id": 1, "text": "Python uses something else to execute code." },
{ "id": 2, "text": "Compiled languages like C++ need this, but Python doesn’t." },
{ "id": 3, "text": "Think about how Python runs your code line-by-line." },
{ "id": 4, "text": "The answer relates to Python being an interpreted language." },
{ "id": 5, "text": "Check if Python needs a separate build step." }
]
},
{
"type": "order",
"question": "Arrange the steps to write and run your first Python program:",
"options": [
"Save the file with a .py extension.",
"Run the program using the interpreter.",
"Write print('Hello, World!') in a .py file."
],
"correctOrder": [
"Write print('Hello, World!') in a .py file.",
"Save the file with a .py extension.",
"Run the program using the interpreter."
],
"component": "OrderQuestion",
"hints": [
{ "id": 1, "text": "You need to write code before saving it." },
{ "id": 2, "text": "Saving comes before running." },
{ "id": 3, "text": "The interpreter is the last step to see output." },
{ "id": 4, "text": "Think of the sequence: write, save, execute." },
{ "id": 5, "text": "The .py extension tells Python it’s a script." }
]
},
{
"type": "match",
"question": "Match the term to its role in Python programming:",
"options": [
{ "term": "Interpreter", "match": "Executes Code" },
{ "term": "IDE", "match": "Development Environment" }
],
"component": "MatchQuestion",
"hints": [
{ "id": 1, "text": "One term helps you write code, the other runs it." },
{ "id": 2, "text": "IDE stands for Integrated Development Environment." },
{ "id": 3, "text": "The interpreter is what makes Python run line-by-line." },
{ "id": 4, "text": "Think of tools like PyCharm for one of these." },
{ "id": 5, "text": "Execution is about running the program." }
]
},
{
"type": "code-correction",
"question": "What’s wrong with this statement?\n\nPython needs to be compiled before it can run.",
"options": [
"The statement is correct.",
"Python uses an interpreter instead.",
"Python is compiled into bytecode first."
],
"answer": "Python uses an interpreter instead.",
"component": "CodeCorrectionQuestion",
"hints": [
{ "id": 1, "text": "Python doesn’t require a traditional compilation step." },
{ "id": 2, "text": "Think about how Python executes code directly." },
{ "id": 3, "text": "One option describes Python’s actual process." },
{ "id": 4, "text": "Compiled languages like Java differ from Python here." },
{ "id": 5, "text": "The correct answer involves an 'interpreter'." }
]
},
{
"type": "unscramble",
"question": "Unscramble these words to form a correct statement about Python’s first program:",
"options": ["your", "print", "is", "World", "Hello"],
"answer": ["print", "Hello", "World"],
"component": "DragDropQuestion",
"hints": [
{ "id": 1, "text": "The statement is a basic Python command." },
{ "id": 2, "text": "It involves displaying text on the screen." },
{ "id": 3, "text": "The first word is a Python function." },
{ "id": 4, "text": "The last two words form a common greeting." },
{ "id": 5, "text": "You’ll need parentheses in the final code." }
]
},
{
"type": "multiple-choice",
"question": "Which IDE is commonly used for Python development?",
"options": [
"Notepad",
"PyCharm",
"Microsoft Word"
],
"answer": "PyCharm",
"component": "MultipleChoiceQuestion",
"hints": [
{ "id": 1, "text": "It’s a specialized tool for coding." },
{ "id": 2, "text": "This option is designed for Python developers." },
{ "id": 3, "text": "It’s not a general text editor or word processor." },
{ "id": 4, "text": "Think of a tool with debugging and autocomplete features." },
{ "id": 5, "text": "The name includes 'Py' like Python." }
]
},
{
"type": "fill",
"question": "Python uses an __________ to execute code line-by-line rather than compiling it first.",
"answer": "interpreter",
"component": "FillInTheBlank",
"hints": [
{ "id": 1, "text": "This term refers to a program that runs code directly." },
{ "id": 2, "text": "It’s the opposite of a compiler." },
{ "id": 3, "text": "Python doesn’t need a separate step to turn code into machine language." },
{ "id": 4, "text": "Think of how Python executes your print statements immediately." },
{ "id": 5, "text": "The word starts with 'i' and ends with 'r'." }
]
}
] },
          { "subtopic": "Python syntax, keywords, and comments", "questionsData": [] },
          { "subtopic": "Python's interpreter vs. compiled languages", "questionsData": [] }
        ]
      },
      {
        "topic": "2. Basic Data Types and Variables",
        "subtopics": [
          { "subtopic": "Numbers (integers, floats, complex)", "questionsData": [] },
          { "subtopic": "Strings", "questionsData": [] },
          { "subtopic": "Booleans", "questionsData": [] },
          { "subtopic": "Type conversion (int to float, string to int, etc.)", "questionsData": [] },
          { "subtopic": "Variable naming conventions and dynamic typing", "questionsData": [] }
        ]
      },
      {
        "topic": "3. Operators and Expressions",
        "subtopics": [
          { "subtopic": "Arithmetic operators: +, -, *, /, //, %, *", "questionsData": [] },
          { "subtopic": "Comparison operators: ==, !=, >, <, >=, <=", "questionsData": [] },
          { "subtopic": "Logical operators: and, or, not", "questionsData": [] },
          { "subtopic": "Assignment operators: =, +=", "questionsData": [] },
          { "subtopic": "Bitwise operators (optional for beginners)", "questionsData": [] }
        ]
      },
      {
        "topic": "4. Control Flow: Conditionals and Loops",
        "subtopics": [
          { "subtopic": "Conditionals: if, elif, else", "questionsData": [] },
          { "subtopic": "for loops (with range and iterables)", "questionsData": [] },
          { "subtopic": "while loops", "questionsData": [] },
          { "subtopic": "Loop control statements: break, continue, pass", "questionsData": [] },
          { "subtopic": "Nested loops and conditionals", "questionsData": [] }
        ]
      },
      {
        "topic": "5. Functions and Modular Code",
        "subtopics": [
          { "subtopic": "Defining functions using def", "questionsData": [] },
          { "subtopic": "Function parameters and return values", "questionsData": [] },
          { "subtopic": "Function scope: local vs global variables", "questionsData": [] },
          { "subtopic": "Default parameters and keyword arguments", "questionsData": [] },
          { "subtopic": "Lambda functions (anonymous functions)", "questionsData": [] },
          { "subtopic": "Understanding recursion (optional for beginners)", "questionsData": [] }
        ]
      },
      {
        "topic": "6. Basic Input and Output",
        "subtopics": [
          { "subtopic": "User input using input()", "questionsData": [] },
          { "subtopic": "Output formatting using print()", "questionsData": [] },
          { "subtopic": "String interpolation (f-strings, % formatting, .format())", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 2: Data Structures and Collections",
    "topics": [
      {
        "topic": "7. Lists",
        "subtopics": [
          { "subtopic": "Creating and modifying lists", "questionsData": [] },
          { "subtopic": "List methods: append(), pop(), remove(), etc.", "questionsData": [] },
          { "subtopic": "List slicing and indexing", "questionsData": [] },
          { "subtopic": "List comprehensions", "questionsData": [] },
          { "subtopic": "Working with nested lists", "questionsData": [] }
        ]
      },
      {
        "topic": "8. Tuples",
        "subtopics": [
          { "subtopic": "Creating tuples and understanding immutability", "questionsData": [] },
          { "subtopic": "Tuple packing and unpacking", "questionsData": [] },
          { "subtopic": "Using tuples as dictionary keys", "questionsData": [] }
        ]
      },
      {
        "topic": "9. Dictionaries",
        "subtopics": [
          { "subtopic": "Creating dictionaries", "questionsData": [] },
          { "subtopic": "Accessing, modifying, and deleting key-value pairs", "questionsData": [] },
          { "subtopic": "Dictionary methods: keys(), values(), items()", "questionsData": [] },
          { "subtopic": "Dictionary comprehensions", "questionsData": [] }
        ]
      },
      {
        "topic": "10. Sets",
        "subtopics": [
          { "subtopic": "Creating and using sets", "questionsData": [] },
          { "subtopic": "Set operations: union, intersection, difference, symmetric difference", "questionsData": [] },
          { "subtopic": "Set methods: add(), remove(), discard()", "questionsData": [] }
        ]
      },
      {
        "topic": "11. String Manipulation",
        "subtopics": [
          { "subtopic": "String slicing and indexing", "questionsData": [] },
          { "subtopic": "String methods: split(), join(), replace(), strip(), etc.", "questionsData": [] },
          { "subtopic": "String formatting with f-strings and .format()", "questionsData": [] },
          { "subtopic": "Working with multi-line strings", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 3: Intermediate Topics",
    "topics": [
      {
        "topic": "12. File Handling",
        "subtopics": [
          { "subtopic": "Reading from and writing to text files", "questionsData": [] },
          { "subtopic": "File modes: r, w, a, x", "questionsData": [] },
          { "subtopic": "Context managers with with open() for safe file handling", "questionsData": [] },
          { "subtopic": "Handling CSV files (optional)", "questionsData": [] }
        ]
      },
      {
        "topic": "13. Error and Exception Handling",
        "subtopics": [
          { "subtopic": "try-except blocks for catching exceptions", "questionsData": [] },
          { "subtopic": "Raising exceptions with raise", "questionsData": [] },
          { "subtopic": "Using finally for clean-up actions", "questionsData": [] },
          { "subtopic": "Custom exceptions (optional)", "questionsData": [] }
        ]
      },
      {
        "topic": "14. Object-Oriented Programming (OOP) Basics",
        "subtopics": [
          { "subtopic": "Defining and using classes", "questionsData": [] },
          { "subtopic": "Creating objects (instances)", "questionsData": [] },
          { "subtopic": "Instance variables and methods", "questionsData": [] },
          { "subtopic": "Constructor: __init__()", "questionsData": [] },
          { "subtopic": "Class variables and methods", "questionsData": [] },
          { "subtopic": "Inheritance and method overriding", "questionsData": [] },
          { "subtopic": "Understanding self and super()", "questionsData": [] },
          { "subtopic": "Encapsulation and private members (using _ and __)", "questionsData": [] }
        ]
      },
      {
        "topic": "15. Modules and Packages",
        "subtopics": [
          { "subtopic": "Importing standard Python modules: math, os, random, etc.", "questionsData": [] },
          { "subtopic": "Writing and importing custom modules", "questionsData": [] },
          { "subtopic": "Using packages: understanding the __init__.py file", "questionsData": [] },
          { "subtopic": "Installing external packages using pip", "questionsData": [] }
        ]
      },
      {
        "topic": "16. Working with Libraries",
        "subtopics": [
          { "subtopic": "Math Library: Basic mathematical functions like sqrt(), pow(), sin()", "questionsData": [] },
          { "subtopic": "Random Library: Generating random numbers, selecting random elements", "questionsData": [] },
          { "subtopic": "OS Library: Working with file systems, directories, and environment variables", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 4: Working with Data and Basic Algorithms",
    "topics": [
      {
        "topic": "17. Data Structures: Stacks, Queues, and Linked Lists (optional but useful)",
        "subtopics": [
          { "subtopic": "Implementing stacks using lists", "questionsData": [] },
          { "subtopic": "Implementing queues with deque from the collections module", "questionsData": [] },
          { "subtopic": "Simple linked lists (for understanding)", "questionsData": [] }
        ]
      },
      {
        "topic": "18. Sorting and Searching Algorithms (optional for beginners)",
        "subtopics": [
          { "subtopic": "Understanding basic sorting algorithms: Bubble sort, Insertion sort, Merge sort", "questionsData": [] },
          { "subtopic": "Searching algorithms: Linear search, Binary search", "questionsData": [] },
          { "subtopic": "Built-in functions: sorted(), min(), max(), sum()", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 5: Advanced Beginner Topics",
    "topics": [
      {
        "topic": "19. Basic Regular Expressions",
        "subtopics": [
          { "subtopic": "Using the re module for pattern matching", "questionsData": [] },
          { "subtopic": "Common regex patterns for matching text, digits, and special characters", "questionsData": [] },
          { "subtopic": "Searching and replacing text with sub()", "questionsData": [] }
        ]
      },
      {
        "topic": "20. Debugging and Testing",
        "subtopics": [
          { "subtopic": "Print debugging: Using print statements to understand code flow", "questionsData": [] },
          { "subtopic": "Logging: Using the logging module for structured log messages", "questionsData": [] },
          { "subtopic": "Basic Unit Testing: Writing unit tests using Python’s unittest module", "questionsData": [] },
          { "subtopic": "Running tests and interpreting results", "questionsData": [] }
        ]
      },
      {
        "topic": "21. Basic Introduction to Databases (Optional)",
        "subtopics": [
          { "subtopic": "Introduction to working with SQL databases in Python using sqlite3", "questionsData": [] },
          { "subtopic": "Performing basic CRUD operations (Create, Read, Update, Delete)", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 6: Project Development and Version Control",
    "topics": [
      {
        "topic": "22. Version Control with Git and GitHub",
        "subtopics": [
          { "subtopic": "Basic Git commands: git init, git add, git commit, git push", "questionsData": [] },
          { "subtopic": "Understanding branching: git branch, git checkout", "questionsData": [] },
          { "subtopic": "Working with GitHub repositories: pushing and pulling code", "questionsData": [] }
        ]
      },
      {
        "topic": "23. Building Small Projects",
        "subtopics": [
          { "subtopic": "Simple calculator app", "questionsData": [] },
          { "subtopic": "To-do list manager (using file I/O)", "questionsData": [] },
          { "subtopic": "Number guessing game", "questionsData": [] },
          { "subtopic": "Basic web scraper (using requests and BeautifulSoup)", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 7: Continuous Learning and Practice",
    "topics": [
      {
        "topic": "24. Project-Based Learning",
        "subtopics": [
          { "subtopic": "Participate in coding challenges (e.g., HackerRank, LeetCode)", "questionsData": [] },
          { "subtopic": "Build larger projects", "questionsData": [] },
          { "subtopic": "Basic API interaction (fetching data from an API)", "questionsData": [] },
          { "subtopic": "Simple web app with Flask or Django (optional)", "questionsData": [] }
        ]
      },
      {
        "topic": "25. Explore Specialized Libraries and Fields",
        "subtopics": [
          { "subtopic": "Web Development: Flask, Django", "questionsData": [] },
          { "subtopic": "Data Science: NumPy, Pandas, Matplotlib", "questionsData": [] },
          { "subtopic": "Automation: selenium, pyautogui", "questionsData": [] }
        ]
      }
    ]
  }
]
